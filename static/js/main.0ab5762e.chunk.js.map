{"version":3,"sources":["game/levels.js","utils.js","game/vector.js","game/core.js","components/level.js","components/lives.js","components/block.js","components/paddle.js","components/ball.js","components/scene.js","App.js","components/page.js","index.js"],"names":["LEVELS","require","getRange","length","Array","keys","getRandomFrom","args","Math","floor","random","registerListener","eventName","handler","window","addEventListener","removeEventListener","Vector","x","y","this","number","hypot","scaleBy","other","amt","dotProduct","normal","subtract","projectOn","degrees","radians","PI","toRadians","cos","sin","atan2","crossProduct","BLOCK_HEIGHT","PADDLE_HEIGHT","MOVEMENT","LEFT","RIGHT","UP","DOWN","LEFT_UP","add","normalize","RIGHT_UP","getInitialPaddleAndBall","width","height","paddleWidth","paddleY","paddle","position","ball","center","BALL_RADIUS","radius","direction","getGameStateFromLevel","arrays","lives","speed","blocks","blocksStart","rowsOfBlocks","map","row","i","density","j","size","reduce","acc","isInBoundaries","oneSide","otherSide","oneBoundary","otherBoundary","getNewGameState","state","movement","timespan","distance","withNewX","getNewPaddle","oldDirection","newBallCenter","ballBottom","withNewBallProps","props","withNewBallDirection","vector","minAngle","angle","angleBetween","maxAngle","rotate","getAdjustedVector","distortionLevel","getComponent","distortion","getDistortedDirection","reflect","ballLeft","ballRight","ballTop","paddleLeft","paddleRight","paddleTop","abs","array","element","block","find","newBlock","filter","e","oldElement","newElement","updateElement","blockTop","blockBottom","blockLeft","getNewBallNormal","level","unit","fontSize","className","containerWidth","rx","colors","fill","cx","cy","r","MOVEMENT_KEYS","getProjectors","containerSize","gameSize","widthRatio","heightRatio","unitOnScreen","min","projectDistance","projectVector","getInitialState","inState","localStorage","getItem","parseInt","getInitialLevel","game","time","Date","now","stopTime","undefined","ACTION","HANDLER","key","includes","newState","newGame","setItem","reducer","type","payload","useReducer","dispatch","act","useEffect","timerId","setInterval","unregisterKeydown","which","unregisterKeyup","clearInterval","viewWidth","Page","sceneContainer","useRef","useState","setSize","onResize","current","getBoundingClientRect","unregisterResizeListener","ref","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.0ab5762e.chunk.js","sourcesContent":["let levels = require('./levels.json')\n\nexport const BLOCK_MAX_DENSITY = 3\n\nexport const LEVELS = levels\n","export const toDegrees = radians => (radians * 180) / Math.PI\nexport const toRadians = degrees => (degrees * Math.PI) / 180\n\nexport const getRange = length => [...Array(length).keys()]\nexport const getRandomFrom = (...args) => args[Math.floor(Math.random() * args.length)]\nexport const flatten = arrays => arrays.reduce((acc, row) => [...acc, ...row], [])\nexport const withoutElement = (array, element) => array.filter(e => e !== element)\nexport const updateElement = (array, oldElement, newElement) => array.map(e => e === oldElement ? newElement : e)\n\nexport const registerListener = (eventName, handler) => {\n  window.addEventListener(eventName, handler)\n  return () => window.removeEventListener(eventName, handler)\n}","import { toDegrees, toRadians } from '../utils'\n\nexport default class Vector {\n  constructor(x, y) {\n    this.x = x\n    this.y = y\n  }\n\n  scaleBy(number) {\n    return new Vector(this.x * number, this.y * number);\n  }\n\n  length() {\n    return Math.hypot(this.x, this.y)\n  }\n\n  add({ x, y }) {\n    return new Vector(this.x + x, this.y + y)\n  }\n\n  normalize() {\n    return this.scaleBy(1 / this.length())\n  }\n\n  subtract({ x, y }) {\n    return new Vector(this.x - x, this.y - y)\n  }\n\n  dotProduct({ x, y }) {\n    return this.x * x + this.y * y\n  }\n\n  projectOn(other) {\n    const amt = this.dotProduct(other) / other.length()\n    return new Vector(amt * other.x, amt * other.y)\n  }\n\n  reflect(normal) {\n    return this.subtract(this.projectOn(normal).scaleBy(2))\n  }\n\n  rotate(degrees) {\n    const radians = toRadians(degrees)\n    const cos = Math.cos(radians)\n    const sin = Math.sin(radians)\n\n    return new Vector(\n      this.x * cos - this.y * sin,\n      this.x * sin + this.y * cos\n    )\n  }\n\n  crossProduct({ x, y }) {\n    return this.x * y - x * this.y\n  }\n\n  angleBetween(other) {\n    return toDegrees(\n      Math.atan2(this.crossProduct(other), this.dotProduct(other))\n    )\n  }\n}","import Vector from './vector'\nimport { flatten, getRandomFrom, withoutElement, updateElement } from '../utils'\n\nconst PADDLE_AREA = 1 / 3\nconst BLOCK_HEIGHT = 1 / 3\nconst PADDLE_HEIGHT = BLOCK_HEIGHT\nconst BALL_RADIUS = 1 / 5\nconst DISTANCE_IN_MS = 0.005\n\nexport const MOVEMENT = {\n  LEFT: 'LEFT',\n  RIGHT: 'RIGHT'\n}\n\nconst LEFT = new Vector(-1, 0)\nconst RIGHT = new Vector(1, 0)\nconst UP = new Vector(0, -1)\nconst DOWN = new Vector(0, 1)\n\nconst LEFT_UP = LEFT.add(UP).normalize()\nconst RIGHT_UP = RIGHT.add(UP).normalize()\n\nexport const getInitialPaddleAndBall = (width, height, paddleWidth) => {\n  const paddleY = height - PADDLE_HEIGHT\n  const paddle = {\n    position: new Vector((width - paddleWidth) / 2, paddleY),\n    width: paddleWidth,\n    height: PADDLE_HEIGHT\n  }\n  const ball = {\n    center: new Vector(height / 2, paddleY - BALL_RADIUS * 2),\n    radius: BALL_RADIUS,\n    direction: getRandomFrom(LEFT_UP, RIGHT_UP)\n  }\n\n  return {\n    paddle,\n    ball\n  }\n}\n\nexport const getGameStateFromLevel = ({ lives, paddleWidth, speed, blocks }) => {\n  const width = blocks[0].length\n  const height = width\n\n  const blocksStart = ((height - height * PADDLE_AREA) - blocks.length * BLOCK_HEIGHT) / 2\n\n  const rowsOfBlocks = blocks.map((row, i) =>\n    row.map((density, j) => ({\n      density,\n      position: new Vector(j, blocksStart + (i * BLOCK_HEIGHT)),\n      width: 1,\n      height: BLOCK_HEIGHT\n    })\n  ))\n\n  const size = {\n    width,\n    height\n  }\n  return {\n    size,\n    blocks: flatten(rowsOfBlocks),\n    ...getInitialPaddleAndBall(width, height, paddleWidth),\n    lives,\n    speed\n  }\n}\n\nconst getDistortedDirection = (vector, distortionLevel = 0.3) => {\n  const getComponent = () => Math.random() * distortionLevel - distortionLevel / 2\n  const distortion = new Vector(getComponent(), getComponent())\n  return vector.add(distortion).normalize()\n}\n\nconst getNewPaddle = (paddle, size, distance, movement) => {\n  if (!movement) return paddle\n  const direction = movement === MOVEMENT.LEFT ? LEFT : RIGHT\n\n  const { x } = paddle.position.add(direction.scaleBy(distance))\n  const withNewX = x => ({\n    ...paddle,\n    position: new Vector(x, paddle.position.y)\n  })\n  if (x < 0) {\n    return withNewX(0)\n  }\n  if (x + paddle.width > size.width) {\n    return withNewX(size.width - paddle.width)\n  }\n  return withNewX(x)\n}\n\nconst isInBoundaries = (oneSide, otherSide, oneBoundary, otherBoundary) => (\n  (oneSide >= oneBoundary && oneSide <= otherBoundary) ||\n  (otherSide >= oneBoundary && otherSide <= otherBoundary)\n)\n\nconst getAdjustedVector = (normal, vector, minAngle = 15) => {\n  const angle = normal.angleBetween(vector)\n  const maxAngle = 90 - minAngle\n  if (angle < 0) {\n    if (angle > -minAngle) {\n      return normal.rotate(-minAngle)\n    }\n    if (angle < -maxAngle) {\n      return normal.rotate(-maxAngle)\n    }\n  } else {\n    if (angle < minAngle) {\n      return normal.rotate(minAngle)\n    }\n    if (angle > maxAngle) {\n      return normal.rotate(maxAngle)\n    }\n  }\n  return vector\n}\n\nexport const getNewGameState = (state, movement, timespan) => {\n  const { size, speed, lives } = state\n  const distance = timespan * DISTANCE_IN_MS * speed\n  const paddle = getNewPaddle(state.paddle, size, distance, movement)\n\n  const { radius } = state.ball\n  const oldDirection = state.ball.direction\n  const newBallCenter = state.ball.center.add(oldDirection.scaleBy(distance))\n  const ballBottom = newBallCenter.y + radius\n  if (ballBottom > size.height) {\n    return {\n      ...state,\n      ...getInitialPaddleAndBall(size.width, size.height, paddle.width),\n      lives: lives - 1\n    }\n  }\n  \n  const withNewBallProps = props => ({\n    ...state,\n    paddle,\n    ball: {\n      ...state.ball,\n      ...props\n    }\n  })\n\n  const withNewBallDirection = normal => {\n    const distorted = getDistortedDirection(oldDirection.reflect(normal))\n    const direction = getAdjustedVector(normal, distorted)\n    return withNewBallProps({ direction })\n  }\n  const ballLeft = newBallCenter.x - radius\n  const ballRight = newBallCenter.x + radius\n  const ballTop = newBallCenter.y - radius\n  const paddleLeft = paddle.position.x\n  const paddleRight = paddleLeft+ paddle.width\n  const paddleTop = paddle.position.y\n\n  const ballGoingDown = Math.abs(UP.angleBetween(oldDirection)) > 90\n  const hitPaddle = ballGoingDown && ballBottom >= paddleTop && ballRight >= paddleLeft && ballLeft <= paddleRight\n  if (hitPaddle) return withNewBallDirection(UP)\n  if (ballTop <= 0) return withNewBallDirection(DOWN)\n  if (ballLeft <= 0) return withNewBallDirection(RIGHT)\n  if (ballRight >= size.width) return withNewBallDirection(LEFT)\n\n  const block = state.blocks.find(({ position, width, height }) => (\n    isInBoundaries(ballTop, ballBottom, position.y, position.y + height) &&\n    isInBoundaries(ballLeft, ballRight, position.x, position.x + width) \n  ))\n  if (block) {\n    const density = block.density - 1\n    const newBlock = { ...block, density }\n    const blocks = density < 0 ? withoutElement(state.blocks, block) : updateElement(state.blocks, block, newBlock)\n    \n    const getNewBallNormal = () => {\n      const blockTop = block.position.y\n      const blockBottom = blockTop + block.height\n      const blockLeft = block.position.x\n      if (ballTop > blockTop - radius && ballBottom < blockBottom + radius) {\n        if (ballLeft < blockLeft) return LEFT\n        if (ballRight > blockLeft + block.width) return RIGHT\n      }\n      if (ballTop > blockTop) return DOWN\n      if (ballTop <= blockTop) return UP\n    }\n    return {\n      ...withNewBallDirection(getNewBallNormal()),\n      blocks\n    }\n  }\n  return withNewBallProps({ center: newBallCenter })\n}\n\n","import React from 'react'\n\nexport default ({ level, unit }) => (\n  <text x={unit} y={unit * 2} fontSize={unit} className='level'>LEVEL: {level}</text>\n)\n","import React from 'react'\n\nimport { getRange } from '../utils'\n\nexport default ({ lives, containerWidth, unit }) => {\n  const width = unit * 2\n  return getRange(lives).map(i => (\n    <rect\n      className='life'\n      rx={unit / 4}\n      height={unit}\n      width={width}\n      y={unit}\n      x={containerWidth - unit - width * (i + 1) - (unit / 2) * i}\n      key={i}\n    />\n  ))\n}","import React from 'react'\nimport { getRange } from '../utils'\n\nconst BLOCK_MAX_DENSITY = 3\nconst colors = getRange(BLOCK_MAX_DENSITY).map(i => `rgba(26, 188, 156, ${1 / (BLOCK_MAX_DENSITY - i)})`)\n\nexport default ({ x, y, width, height, density }) => (\n  <rect className='block' fill={colors[density]} x={x} y={y} width={width} height={height} />\n)","\nimport React from 'react'\n\nexport default ({ x, y, width, height }) => (\n  <rect className='paddle' x={x} y={y} width={width} height={height} />\n)","import React from 'react'\n\nexport default ({ x, y, radius }) => (\n  <circle className='ball' cx={x} cy={y} r={radius} />\n)","import React, { useEffect, useReducer } from 'react'\n\nimport { LEVELS } from '../game/levels'\nimport { MOVEMENT, getNewGameState, getGameStateFromLevel } from '../game/core'\nimport { registerListener } from '../utils'\n\nimport Level from './level'\nimport Lives from './lives'\nimport Block from './block'\nimport Paddle from './paddle'\nimport Ball from './ball'\n\nconst MOVEMENT_KEYS = {\n  LEFT: [65, 37],\n  RIGHT: [68, 39]\n}\n\nconst STOP_KEY = 32\n\nconst UPDATE_EVERY = 1000 / 60\n\nconst getInitialLevel = () => {\n  const inState = localStorage.getItem('level')\n  return inState ? parseInt(inState, 10) : 0\n}\n\nconst getProjectors = (containerSize, gameSize) => {\n  const widthRatio = containerSize.width / gameSize.width\n  const heightRatio = containerSize.height / gameSize.height\n  const unitOnScreen = Math.min(widthRatio, heightRatio)\n\n  return {\n    projectDistance: distance => distance * unitOnScreen,\n    projectVector: vector => vector.scaleBy(unitOnScreen)\n  }\n}\n\nconst getInitialState = containerSize => {\n  const level = getInitialLevel()\n  const game = getGameStateFromLevel(LEVELS[level])\n  const { projectDistance, projectVector } = getProjectors(containerSize, game.size)\n  return {\n    level,\n    game,\n    containerSize,\n    projectDistance,\n    projectVector,\n    time: Date.now(),\n    stopTime: undefined,\n    movement: undefined\n  }\n}\n\nconst ACTION = {\n  CONTAINER_SIZE_CHANGE: 'CONTAINER_SIZE_CHANGE',\n  KEY_DOWN: 'KEY_DOWN',\n  KEY_UP: 'KEY_UP',\n  TICK: 'TICK'\n}\n\nconst HANDLER = {\n  [ACTION.CONTAINER_SIZE_CHANGE]: (state, containerSize) => ({\n    ...state,\n    containerSize,\n    ...getProjectors(containerSize, state.game.size)\n  }),\n  [ACTION.KEY_DOWN]: (state, key) => {\n    if (MOVEMENT_KEYS.LEFT.includes(key)) {\n      return { ...state, movement: MOVEMENT.LEFT }\n    } else if (MOVEMENT_KEYS.RIGHT.includes(key)) {\n      return { ...state, movement: MOVEMENT.RIGHT }\n    }\n    return state\n  },\n  [ACTION.KEY_UP]: (state, key) => {\n    const newState = { ...state, movement: undefined }\n    if (key === STOP_KEY) {\n      if (state.stopTime) {\n        return { ...newState, stopTime: undefined, time: state.time + Date.now() - state.stopTime}\n      } else {\n        return { ...newState, stopTime: Date.now() }\n      }\n    }\n    return newState\n  },\n  [ACTION.TICK]: state => {\n    if (state.stopTime) return state\n\n    const time = Date.now()\n    const newGame = getNewGameState(state.game, state.movement, time - state.time)\n    const newState = { ...state, time }\n    if (newGame.lives < 1) {\n      return { ...newState, game: getGameStateFromLevel(LEVELS[state.level]) }\n    } else if (newGame.blocks.length < 1) {\n      const level = state.level === LEVELS.length ? state.level : state.level + 1\n      localStorage.setItem('level', level)\n      const game = getGameStateFromLevel(LEVELS[state.level])\n      return {\n        ...newState,\n        level,\n        game,\n        ...getProjectors(state.containerSize, game.size)\n      }\n    }\n    return { ...newState, game: newGame }\n  }\n}\n\nconst reducer = (state, { type, payload }) => {\n  const handler = HANDLER[type]\n  if (!handler) return state\n  return handler(state, payload)\n}\n\nexport default (containerSize) => {\n  const [state, dispatch] = useReducer(reducer, containerSize, getInitialState)\n  const act = (type, payload) => dispatch({ type, payload })\n  const {\n    projectDistance,\n    projectVector,\n    level,\n    game: {\n      blocks,\n      paddle,\n      ball,\n      size: {\n        width,\n        height\n      },\n      lives\n    }\n  } = state\n\n  useEffect(() => act(ACTION.CONTAINER_SIZE_CHANGE, containerSize), [containerSize])\n\n  useEffect(() => {\n    const onKeyDown = ({ which }) => act(ACTION.KEY_DOWN, which)\n    const onKeyUp = ({ which }) => act(ACTION.KEY_UP, which)\n    const tick = () => act(ACTION.TICK)\n\n    const timerId = setInterval(tick, UPDATE_EVERY)\n    const unregisterKeydown = registerListener('keydown', onKeyDown)\n    const unregisterKeyup = registerListener('keyup', onKeyUp)\n    return () => {\n      clearInterval(timerId)\n      unregisterKeydown()\n      unregisterKeyup()\n    }\n  }, [])\n  \n  const viewWidth = projectDistance(width)\n  const unit = projectDistance(ball.radius)\n  return (\n    <svg width={viewWidth} height={projectDistance(height)} className='scene'>\n      <Level unit={unit} level={level + 1} />\n      <Lives\n        lives={lives}\n        containerWidth={viewWidth}\n        unit={unit}\n      />\n      {blocks.map(({ density, position, width, height }) => (\n        <Block\n          density={density}\n          key={`${position.x}-${position.y}`}\n          width={projectDistance(width)}\n          height={projectDistance(height)}\n          {...projectVector(position)}\n        />)\n      )}\n      <Paddle width={projectDistance(paddle.width)} height={projectDistance(paddle.height)} {...projectVector(paddle.position)} />\n      <Ball {...projectVector(ball.center)} radius={unit} />\n    </svg>\n  )\n}","import Page from './components/page'\n\nexport default Page\n","import React, { useRef, useEffect, useState } from 'react'\n\nimport Scene from './scene'\nimport { registerListener } from '../utils'\n\nexport default () => {\n  const sceneContainer = useRef()\n  const [size, setSize] = useState()\n\n  useEffect(() => {\n    const onResize = () => {\n      const { width, height } = sceneContainer.current.getBoundingClientRect()\n      setSize({ width, height })\n    }\n    const unregisterResizeListener = registerListener('resize', onResize)\n    onResize()\n    return unregisterResizeListener\n  }, [])\n\n  return (\n    <div className='page'>\n      <div className='scene-container' ref={sceneContainer}>\n        {size && <Scene width={size.width} height={size.height} />}\n      </div>\n    </div>\n  )\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}